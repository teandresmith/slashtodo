// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"github.com/99designs/gqlgen/graphql"
)

type CreateTodoInput struct {
	// Desired name of the todo
	Name string `json:"name"`
	// Desired description of the todo
	Description *string `json:"description,omitempty"`
	// Date the todo is expected to be completed by
	DueDate *time.Time `json:"dueDate,omitempty"`
}

type Mutation struct {
}

type Query struct {
}

type Todo struct {
	// ID of the todo
	ID string `json:"id"`
	// Name of the todo
	Name string `json:"name"`
	// Description for the todo
	Description *string `json:"description,omitempty"`
	// Date the todo should be completed by
	DueDate *time.Time `json:"dueDate,omitempty"`
	// Current status of the todo
	Status TodoStatus `json:"status"`
	// Flag that indicates if the todo is currently archived
	IsArchived bool `json:"isArchived"`
	// Time the todo was created at
	CreatedAt time.Time `json:"createdAt"`
	// Time the todo was last updated at
	UpdatedAt time.Time `json:"updatedAt"`
	// Time the todo was deleted at
	DeletedAt *time.Time `json:"deletedAt,omitempty"`
}

type TodoFilter struct {
	Status     *TodoStatus `json:"status,omitempty"`
	IsArchived *bool       `json:"isArchived,omitempty"`
	IsOverdue  *bool       `json:"isOverdue,omitempty"`
	IsDeleted  *bool       `json:"isDeleted,omitempty"`
}

type UpdateTodoInput struct {
	// Desired name of the todo
	Name *string `json:"name,omitempty"`
	// Desired description of the todo
	Description graphql.Omittable[*string] `json:"description,omitempty"`
	// Desired target date for the todo
	DueDate graphql.Omittable[*time.Time] `json:"dueDate,omitempty"`
	// New status for the todo
	Status *TodoStatus `json:"status,omitempty"`
	// Should the status be archived?
	IsArchived *bool `json:"isArchived,omitempty"`
}

// Possible statuses for a todo task
type TodoStatus string

const (
	TodoStatusOpen   TodoStatus = "OPEN"
	TodoStatusClosed TodoStatus = "CLOSED"
)

var AllTodoStatus = []TodoStatus{
	TodoStatusOpen,
	TodoStatusClosed,
}

func (e TodoStatus) IsValid() bool {
	switch e {
	case TodoStatusOpen, TodoStatusClosed:
		return true
	}
	return false
}

func (e TodoStatus) String() string {
	return string(e)
}

func (e *TodoStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TodoStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TodoStatus", str)
	}
	return nil
}

func (e TodoStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
